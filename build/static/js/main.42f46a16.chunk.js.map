{"version":3,"sources":["components/BackButton.js","components/PkmDisplay.js","components/Pokemon.js","components/Checkbox.js","components/ChecklistTasks.js","components/Checklist.js","components/ProjectButton.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["BackButton","className","to","PkmDisplay","props","capitalize","s","charAt","toUpperCase","slice","state","name","id","this","pkmName","pkmID","setState","height","src","icon","Component","Pokemon","numberOfPkms","list","handleInput","bind","requestPokemons","searchPokemons","fetch","then","data","json","results","map","pkm","e","target","value","preventDefault","listItems","index","onSubmit","type","onChange","onClick","React","Checkbox","item","toggleTask","checked","done","key","ChecklistTasks","items","removeTask","updateTask","title","handleTaskDisplay","duration","easing","Checklist","saveState","localStorage","setItem","JSON","stringify","taskList","loadState","mySavedList","parse","getItem","addTask","currentText","trim","newTask","Date","now","taskKey","window","confirm","newList","filter","task","i","length","prevProps","prevState","placeholder","ProjectButton","img","label","Home","library","add","faTrash","faPaw","App","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.42f46a16.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport default function BackButton() {\n    return (\n        <Link className=\"back-button\" to=\"/\">&lt; Home</Link>\n    )\n}\n","import React, { Component } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport LazyLoad from 'react-lazy-load';\n\nexport default class PkmDisplay extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: \"\",\n            id: \"\"\n        }\n    }\n\n    componentWillMount() {\n        const {pkmName, pkmID} = this.props;\n\n        this.setState({\n            name: pkmName,\n            id: pkmID\n        });\n    }\n\n    capitalize = (s) => {\n        if (typeof s !== 'string') return ''\n        return s.charAt(0).toUpperCase() + s.slice(1)\n    }\n\n    render() {\n        return (\n            <div className=\"list-item\">\n                <div className=\"container\">\n                    <p>\n                        <div className=\"pkmImageDisplay\">\n                            <LazyLoad height={90}>\n                                <img src={\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/\"+this.state.id+\".png\"} />\n                            </LazyLoad>\n                        </div>\n                        <span className=\"not-cut\">{this.state.id} - {this.capitalize(this.state.name)}</span>\n                        <FontAwesomeIcon icon=\"paw\" className=\"icon\" />\n                    </p>\n                </div>\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport BackButton from './BackButton';\nimport PkmDisplay from './PkmDisplay';\n\nexport default class Pokemon extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            numberOfPkms: 9,\n            list: []\n        };\n\n        //Binding this to the method\n        this.handleInput = this.handleInput.bind(this);\n        this.requestPokemons = this.requestPokemons.bind(this);\n        this.searchPokemons = this.searchPokemons.bind(this);\n    }\n\n    requestPokemons() {\n        fetch(\"https://pokeapi.co/api/v2/pokemon?limit=\"+this.state.numberOfPkms)\n        .then(data => data.json())\n        .then(data => this.setState({list: data.results.map(pkm => pkm.name)}))\n    }\n\n    componentWillMount() {\n        this.requestPokemons();\n    }\n\n    handleInput(e) {\n        this.setState({\n            numberOfPkms: e.target.value\n        });\n    }\n\n    searchPokemons(e) {\n        e.preventDefault();\n        if (this.state.numberOfPkms >= 1) {\n            this.requestPokemons();\n        }else {\n            this.setState({\n                list: []\n            });\n        }\n        \n    }\n\n    render() {\n        const listItems = this.state.list.map((name, index) => {\n            return <PkmDisplay pkmID={index + 1} pkmName={name} />\n        });\n\n        return (\n            <>\n                <BackButton />\n\n                <div className=\"pkmApp\">\n                    <header>\n                        <form onSubmit={this.searchPokemons}>\n                            <input type=\"number\" value={this.state.numberOfPkms} onChange={this.handleInput} />\n                            <button onClick={this.searchPokemons}>Search</button>\n                        </form>\n                    </header>\n                \n                    <div className=\"pkmAppContainer\">\n                        {listItems}\n                    </div>\n                </div>\n            </>\n        )\n    }\n}\n","import React from 'react'\n\nexport default function Checkbox(props) {\n    const item = props.item;\n    const toggleTask = props.onChange;\n    return (\n        <label>\n            <input type=\"checkbox\" checked={item.done} onChange={(e) => {toggleTask(e, item.key)}}></input> \n        </label>\n    )\n}\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport FlipMove from 'react-flip-move';\nimport Checkbox from './Checkbox';\n\nexport default function ChecklistTasks(props) {\n    const items = props.list;\n    const removeTask = props.removeTask;\n    const toggleTask = props.toggleTask;\n    const updateTask = props.updateTask;\n    const handleTaskDisplay = (item) => {\n        return ((item.done)\n                    ?<span className=\"noselect\">{item.title}</span>\n                    :<input type=\"text\" value={item.title} onChange={(e) => {updateTask(e, item.key)}} />)\n    }\n    let listItems = \"\";\n\n    if (items) {\n        listItems = items.map(item => {\n            return <div key={item.key} className=\"list-item\">\n                        <div className=\"container\">\n                            <p>\n                                <Checkbox item={item} onChange={toggleTask} />\n                                {handleTaskDisplay(item)}\n                                <FontAwesomeIcon className=\"icon\" icon=\"trash\" onClick={() => {removeTask(item.key)}} />\n                            </p>\n                        </div>\n                    </div>\n        });\n    }\n\n    return (\n        <div>\n            <FlipMove duration={300} easing=\"ease-in-out\">\n                {listItems}\n            </FlipMove>\n        </div>\n    )\n}\n","import React, { Component } from 'react';\nimport ChecklistTasks from './ChecklistTasks';\nimport BackButton from './BackButton';\n\nexport default class Checklist extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentText: \"\",\n            taskList: []\n        }\n    }\n\n    saveState = () => {\n        localStorage.setItem(\"todoList\", JSON.stringify(this.state.taskList));\n    }\n\n    loadState = () => {\n        if (\"todoList\" in localStorage) {\n            const mySavedList = JSON.parse(localStorage.getItem(\"todoList\"));\n            this.setState({\n                taskList: mySavedList\n            });\n        }\n    }\n\n    addTask = (e) => {\n        e.preventDefault();\n\n        if (this.state.currentText.trim() !== \"\") {\n            const newTask = {\n                key: Date.now(),\n                done: false,\n                title: this.state.currentText\n            }\n            this.setState({\n                taskList: [...this.state.taskList, newTask],\n                currentText: \"\" \n            });\n\n        }else {\n            this.setState({\n                currentText: \"\" \n            });\n        }\n\n    }\n\n    removeTask = (taskKey) => {\n        if (window.confirm(\"Remove item from the list?\")) {\n            const newList = this.state.taskList.filter(task => taskKey != task.key);\n            this.setState({\n                taskList: newList\n            });\n        }\n    }\n\n    toggleTask = (e, taskKey) => {\n        let newList = this.state.taskList;\n\n        for (let i = 0; i < newList.length; i++) {\n            if (newList[i].key === taskKey) {\n                newList[i].done = e.target.checked;\n                break;\n            }\n        }\n\n        this.setState({\n            taskList: newList\n        });\n    }\n\n    updateTask = (e, taskKey) => {\n        let newList = this.state.taskList;\n\n        for (let i = 0; i < newList.length; i++) {\n            if (newList[i].key === taskKey) {\n                newList[i].title = e.target.value;\n                break;\n            }\n        }\n\n        this.setState({\n            taskList: newList\n        });\n    }\n\n    handleInput = (e) => {\n        this.setState({currentText: e.target.value});\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        this.saveState();\n    }\n\n    componentWillMount() {\n        this.loadState();\n    }\n\n    render() {\n        return (\n            <>\n                <BackButton />\n\n                <div className=\"App\">\n                    <header>\n                        <form onSubmit={this.addTask}>\n                            <input onChange={this.handleInput} value={this.state.currentText} type=\"text\" placeholder=\"Task Title\" />\n                            <button onClick={this.addTask}>Add</button>\n                        </form>\n                    </header>\n                    \n                    <ChecklistTasks updateTask={this.updateTask} removeTask={this.removeTask} toggleTask={this.toggleTask} list={this.state.taskList} />\n                </div>\n            </>\n        )\n    }\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport default function ProjectButton(props) {\n    return (\n        <Link to={props.to} className=\"project-button\">\n            <img src={props.img} />\n            <span>\n                {props.label}\n            </span>\n        </Link>\n    )\n}\n","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom';\nimport ProjectButton from './ProjectButton';\n\nexport default class Home extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <>\n                <h1>These are just some react practice projects</h1>\n                <div className=\"projects-container\">\n                <div className=\"projectDisplay\">\n                        <ProjectButton  \n                            img=\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/25.png\"\n                            label=\"Pokémon\"\n                            to=\"/pokemon\"\n                        />\n                        <p>Cosuming Data from an API</p>\n                        <p>Using Lazy-load to deal with images</p>\n                        <p>Handling events</p>\n                    </div>\n                    <div className=\"projectDisplay\">\n                        <ProjectButton  \n                            img=\"/checklist.png\"\n                            label=\"Checklist\"\n                            to=\"/checklist\"\n                        />\n                        <p>Storing data on the browser</p>\n                        <p>Displaying item with animation</p>\n                        <p>Handling events</p>\n                    </div>\n                    \n                </div>\n            </>\n        )\n    }\n}\n","import React from 'react';\nimport './App.css';\nimport Pokemon from './components/Pokemon';\nimport Checklist from './components/Checklist';\nimport Home from './components/Home';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faTrash, faPaw } from '@fortawesome/free-solid-svg-icons';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nlibrary.add(faTrash);\nlibrary.add(faPaw);\n\nfunction App() {\n  return (\n    <Router>\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/checklist\" component={Checklist} />\n          <Route path=\"/pokemon\" component={Pokemon} />\n        </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}